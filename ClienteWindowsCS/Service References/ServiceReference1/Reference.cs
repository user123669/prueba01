//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClienteWindowsCS.ServiceReference1 {
    using System.Data;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.WSAsignaturaSoap")]
    public interface WSAsignaturaSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Listar", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet Listar();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Listar", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> ListarAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Agregar", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] Agregar(string _CodAsignatura, string _Asignatura, string _CodRequisito);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Agregar", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> AgregarAsync(string _CodAsignatura, string _Asignatura, string _CodRequisito);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Eliminar", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] Eliminar(string _CodAsignatura);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Eliminar", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> EliminarAsync(string _CodAsignatura);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Actualizar", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] Actualizar(string _CodAsignatura, string _Asignatura, string _CodRequisito);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Actualizar", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> ActualizarAsync(string _CodAsignatura, string _Asignatura, string _CodRequisito);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Buscar", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet Buscar(string Texto, string Criterio);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Buscar", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> BuscarAsync(string Texto, string Criterio);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface WSAsignaturaSoapChannel : ClienteWindowsCS.ServiceReference1.WSAsignaturaSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WSAsignaturaSoapClient : System.ServiceModel.ClientBase<ClienteWindowsCS.ServiceReference1.WSAsignaturaSoap>, ClienteWindowsCS.ServiceReference1.WSAsignaturaSoap {
        
        public WSAsignaturaSoapClient() {
        }
        
        public WSAsignaturaSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WSAsignaturaSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WSAsignaturaSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WSAsignaturaSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Data.DataSet Listar() {
            return base.Channel.Listar();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> ListarAsync() {
            return base.Channel.ListarAsync();
        }
        
        public string[] Agregar(string _CodAsignatura, string _Asignatura, string _CodRequisito) {
            return base.Channel.Agregar(_CodAsignatura, _Asignatura, _CodRequisito);
        }
        
        public System.Threading.Tasks.Task<string[]> AgregarAsync(string _CodAsignatura, string _Asignatura, string _CodRequisito) {
            return base.Channel.AgregarAsync(_CodAsignatura, _Asignatura, _CodRequisito);
        }
        
        public string[] Eliminar(string _CodAsignatura) {
            return base.Channel.Eliminar(_CodAsignatura);
        }
        
        public System.Threading.Tasks.Task<string[]> EliminarAsync(string _CodAsignatura) {
            return base.Channel.EliminarAsync(_CodAsignatura);
        }
        
        public string[] Actualizar(string _CodAsignatura, string _Asignatura, string _CodRequisito) {
            return base.Channel.Actualizar(_CodAsignatura, _Asignatura, _CodRequisito);
        }
        
        public System.Threading.Tasks.Task<string[]> ActualizarAsync(string _CodAsignatura, string _Asignatura, string _CodRequisito) {
            return base.Channel.ActualizarAsync(_CodAsignatura, _Asignatura, _CodRequisito);
        }
        
        public System.Data.DataSet Buscar(string Texto, string Criterio) {
            return base.Channel.Buscar(Texto, Criterio);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> BuscarAsync(string Texto, string Criterio) {
            return base.Channel.BuscarAsync(Texto, Criterio);
        }
    }
}
